{"version":3,"sources":["js/store/reducer.js","js/components/quote-box.js","js/components/App.js","js/store/store.js","index.js"],"names":["NEW_QUOTE","SET_BUSY","getNewQuote","dispatch","getState","type","fetch","then","response","json","data","payload","quote","content","author","catch","err","console","log","defaultStore","status","themeID","quoteReducer","store","action","QuoteBox","useSelector","state","useDispatch","length","id","className","target","rel","href","role","aria-label","onClick","event","preventDefault","App","composedEnhancer","applyMiddleware","thunkMiddleware","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAGMA,EAAY,YACZC,EAAW,WAGJC,EAAc,SAACC,EAAUC,GAClCD,EAAS,CAACE,KAAMJ,IAEhBK,MAAM,kDACDC,MAAM,SAAAC,GACL,OAAOA,EAASC,UAEjBF,MAAM,SAAAG,GACHP,EAAS,CAACE,KAAML,EAAWW,QAAS,CAACC,MAAOF,EAAKG,QAASC,OAAQJ,EAAKI,aAE1EC,OAAM,SAACC,GACJC,QAAQC,IAAIF,GACZb,EAAS,CAACE,KAAML,EAAWW,QAAS,CAACC,MAAO,4CAA6CE,OAAQ,uBAIvGK,EAAe,CACjBP,MAAO,GACPE,OAAQ,GACRM,OAAQ,OACRC,QAAU,GAoBCC,EAhBM,WAAiC,IAAhCC,EAA+B,uDAAzBJ,EAAcK,EAAW,uCACjD,OAAQA,EAAOnB,MACX,KAAKL,EACD,MAAO,CACHY,MAAQY,EAAOb,QAAQC,MACvBE,OAAQU,EAAOb,QAAQG,OACvBM,OAAQ,OACRC,QAAWE,EAAMF,QAAU,GAAM,GAEzC,KAAKpB,EACC,OAAO,YAAC,eAAIsB,GAAZ,IAAmBH,OAAQ,SACjC,QACI,OAAOG,I,OCSJE,EAhDE,WACb,MAAyCC,aAAY,SAAAC,GAAK,OAAIA,KAAvDf,EAAP,EAAOA,MAAOE,EAAd,EAAcA,OAAQM,EAAtB,EAAsBA,OAAQC,EAA9B,EAA8BA,QAExBlB,EAAWyB,cAOjB,MAAc,QAAVR,GAAqC,IAAjBR,EAAMiB,QAC1B1B,EAASD,GAEL,qBAAK4B,GAAG,YAAYC,UAAU,wCAA9B,SACI,qEAMR,qBAAKA,UAAW,yBAAhB,SACI,sBAAKD,GAAG,YAAYC,UAAU,wCAA9B,UACI,oBAAGD,GAAG,OAAOC,UAAW,cAAxB,UACI,sBAAMA,UAAW,eAAjB,SAAkC,MADtC,UAEQnB,GACJ,sBAAMmB,UAAW,eAAjB,SAAkC,SAEtC,oBAAGD,GAAG,SAASC,UAAW,gBAA1B,eACOjB,KAKP,sBAAKiB,UAAW,oDAAhB,UACI,oBAAGD,GAAG,cAAcE,OAAO,SAASC,IAAI,aAAaF,UAAS,wCAAmCV,EAAnC,yBAC3Da,KAAI,sFAAiFtB,EAAjF,cAA4FE,GADnG,UAEI,mBAAGiB,UAAW,gBAAiBI,KAAM,MAAOC,aAAY,YACxD,iDAGJ,wBAAQN,GAAG,YAAYO,QApCtB,SAACC,GACdA,EAAMC,iBACNpC,EAASD,IAkC6C6B,UAAS,wCAAmCV,GAAtF,gCC7BLmB,G,MAVH,WACV,IAAMnB,EAAUK,aAAY,SAAAC,GAAK,OAAIA,EAAMN,WAE3C,OACE,qBAAKS,GAAI,YAAaC,UAAS,yFAAoFV,GAAnH,SACE,cAAC,EAAD,Q,cCJAoB,EAAmBC,YAAgBC,KAK1BpB,EAFDqB,YAAYC,EAAaJ,G,MCCvCK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUzB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ0B,SAASC,eAAe,sB","file":"static/js/main.a0e557bc.chunk.js","sourcesContent":["// At the minute we only have simple state - it is all lumped in together\n\n// action enums\nconst NEW_QUOTE = 'new-quote';\nconst SET_BUSY = 'set-busy';\n\n// action functions\nexport const getNewQuote = (dispatch, getState) => {\n    dispatch({type: SET_BUSY});\n\n    fetch('https://api.quotable.io/random?tags=technology') // use { \"mode\": \"no-cors\" } - if cors headers not returned correctly\n        .then( response => {\n          return response.json(); \n        })\n        .then( data => {\n            dispatch({type: NEW_QUOTE, payload: {quote: data.content, author: data.author}});\n        })\n        .catch((err) => { \n            console.log(err);\n            dispatch({type: NEW_QUOTE, payload: {quote: \"An error occured retrieving a fresh quote\", author: \"Mista Computa\"}});\n        })\n};\n\nconst defaultStore = {\n    quote: '', \n    author: '',\n    status: 'idle',\n    themeID : 1\n}\n\n// reducers\nconst quoteReducer = (store=defaultStore, action) => {\n    switch (action.type) {\n        case NEW_QUOTE:\n            return {\n                quote : action.payload.quote,\n                author: action.payload.author,\n                status: 'idle',\n                themeID : (store.themeID % 10) + 1\n              };\n        case SET_BUSY:\n              return ({...store, status: 'busy'});\n        default:\n            return store;\n    }\n}\n\nexport default quoteReducer;\nexport {quoteReducer as rootReducer};","import \"./quote-box.scss\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getNewQuote } from \"../store/reducer\";\n\nconst QuoteBox = () => {\n    const {quote, author, status, themeID} = useSelector(state => state);\n\n    const dispatch = useDispatch();\n    const newQuote = (event) => {\n        event.preventDefault();\n        dispatch(getNewQuote);\n    };\n\n\n    if (status == 'idle' && quote.length === 0) {\n        dispatch(getNewQuote);\n        return (\n            <div id=\"quote-box\" className=\"col-6 offset-3 rounded-3 bg-light p-4\">\n                <p>...Busy retrieving a fresh quote.</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className={\"row align-items-center\"}>\n            <div id=\"quote-box\" className=\"col-6 offset-3 rounded-3 bg-light p-4\">\n                <p id=\"text\" className={\"text-center\"}>\n                    <span className={\"fs-3 fw-bold\"}>{'\"'}</span>\n                    {`${quote}`}\n                    <span className={\"fs-3 fw-bold\"}>{'\"'}</span>\n                </p>\n                <p id=\"author\" className={\"text-end pe-2\"}>\n                    ~ {author}\n                </p>\n                \n                \n                {/* <div className={\"container overflow-hidden\"}> */}\n                <div className={\"d-flex justify-content-between align-items-center\"}>\n                    <a id=\"tweet-quote\" target=\"_blank\" rel=\"noreferrer\" className={`btn btn-sm btn-outline-mytheme${themeID} text-decoration-none`}\n                       href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\"${quote}\" ~${author}`}>\n                        <i className={\"bi bi-twitter\"} role={\"img\"} aria-label={\"twitter\"}></i>\n                        <span> tweet me!</span>\n                    </a> \n                        {/* should be a container for links i.e. #quote-links contains .quote-link */}\n                    <button id=\"new-quote\" onClick={newQuote} className={`btn btn-sm btn-outline-mytheme${themeID}`}>new quote</button>\n                </div>\n                {/* </div> */}\n            </div>\n        </div>\n    );\n}\n\nexport default QuoteBox;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport QuoteBox from './quote-box';\nimport './App.scss';\n\nconst App = () => {\n  const themeID = useSelector(state => state.themeID);\n  \n  return (\n    <div id={\"react-app\"} className={`container-fluid min-vh-100 d-flex flex-column justify-content-center bg-mytheme${themeID}`}>\n      <QuoteBox />\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\n// import { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducer'\n\n// const composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware))\nconst composedEnhancer = applyMiddleware(thunkMiddleware);\n\n// The store now has the ability to accept thunk functions in `dispatch`\nconst store = createStore(rootReducer, composedEnhancer)\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { X } from 'bootstrap';\nimport App from './js/components/App';\nimport store from './js/store/store';\nimport './index.scss';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('react-container')\n);\n\n"],"sourceRoot":""}