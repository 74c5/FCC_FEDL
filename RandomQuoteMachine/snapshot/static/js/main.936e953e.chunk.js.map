{"version":3,"sources":["js/store/reducer.js","js/components/quote-box.js","js/components/App.js","js/store/store.js","index.js"],"names":["NEW_QUOTE","getNewQuote","dispatch","getState","fetch","then","response","json","data","console","log","author","quote","type","payload","catch","err","defaultStore","themeID","quoteReducer","store","action","QuoteBox","useSelector","state","useDispatch","id","className","target","href","role","aria-label","onClick","event","preventDefault","App","composedEnhancer","applyMiddleware","thunkMiddleware","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAGMA,G,MAAY,aAGLC,EAAc,SAACC,EAAUC,GAAX,OACvBC,MAAM,qDACDC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GACHC,QAAQC,IAAIF,EAAKG,QACjBF,QAAQC,IAAIF,EAAKI,OACjBV,EAAS,CAACW,KAAMb,EAAWc,QAASN,OAEvCO,OAAM,SAACC,GAAUP,QAAQC,IAAIM,OAGhCC,EAAe,CACnBL,MAAO,GACPD,OAAQ,GACRO,QAAU,GAkBGC,EAdM,WAAiC,IAAhCC,EAA+B,uDAAzBH,EAAcI,EAAW,uCAEnD,OADAZ,QAAQC,IAAIW,GACJA,EAAOR,MACb,KAAKb,EACD,MAAO,CACHY,MAAQS,EAAOP,QAAQF,MACvBD,OAAQU,EAAOP,QAAQH,OACvBO,QAAWE,EAAMF,QAAU,GAAM,GAEzC,QACE,OAAOE,I,OCkBEE,EAhDE,WACb,MAAiCC,aAAY,SAAAC,GAAK,OAAIA,KAA/CZ,EAAP,EAAOA,MAAOD,EAAd,EAAcA,OAAQO,EAAtB,EAAsBA,QAEhBhB,EAAWuB,cAOjB,MAAa,IAATb,GACAV,EAASD,GAEL,qBAAKyB,GAAG,YAAYC,UAAU,wCAA9B,SACI,gEAMR,qBAAKA,UAAW,yBAAhB,SACI,sBAAKD,GAAG,YAAYC,UAAU,wCAA9B,UACI,oBAAGD,GAAG,OAAOC,UAAW,cAAxB,UACI,sBAAMA,UAAW,eAAjB,SAAkC,MADtC,UAEQf,GACJ,sBAAMe,UAAW,eAAjB,SAAkC,SAEtC,oBAAGD,GAAG,SAASC,UAAW,gBAA1B,eACOhB,KAKP,sBAAKgB,UAAW,oDAAhB,UACI,oBAAGD,GAAG,cAAcE,OAAO,SAASD,UAAS,wCAAmCT,EAAnC,yBAC1CW,KAAI,sFAAiFjB,EAAjF,cAA4FD,GADnG,UAEI,mBAAGgB,UAAW,gBAAiBG,KAAM,MAAOC,aAAY,YACxD,iDAGJ,wBAAQL,GAAG,YAAYM,QApCtB,SAACC,GACdA,EAAMC,iBACNhC,EAASD,IAkC6C0B,UAAS,wCAAmCT,GAAtF,gCC7BLiB,G,MAVH,WACV,IAAMjB,EAAUK,aAAY,SAAAC,GAAK,OAAIA,EAAMN,WAE3C,OACE,qBAAKQ,GAAI,YAAaC,UAAS,yFAAoFT,GAAnH,SACE,cAAC,EAAD,Q,cCJAkB,EAAmBC,YAAgBC,KAK1BlB,EAFDmB,YAAYC,EAAaJ,G,MCCvCK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUvB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJwB,SAASC,eAAe,sB","file":"static/js/main.936e953e.chunk.js","sourcesContent":["// At the minute we only have simple state - it is all lumped in together\n\n// action enums\nconst NEW_QUOTE = 'new-quote';\n\n// action functions\nexport const getNewQuote = (dispatch, getState) => (\n    fetch('https://quotes.stormconsultancy.co.uk/random.json')\n        .then( response => response.json() )\n        .then( data => {\n            console.log(data.author);\n            console.log(data.quote);\n            dispatch({type: NEW_QUOTE, payload: data});\n        })\n        .catch((err) => { console.log(err);})\n);\n\nconst defaultStore = {\n  quote: '', \n  author: '',\n  themeID : 1\n}\n\n// reducers\nconst quoteReducer = (store=defaultStore, action) => {\n  console.log(action);\n  switch (action.type) {\n    case NEW_QUOTE:\n        return {\n            quote : action.payload.quote,\n            author: action.payload.author,\n            themeID : (store.themeID % 10) + 1\n          };\n    default:\n      return store;\n  }\n}\n\nexport default quoteReducer;\nexport {quoteReducer as rootReducer};","import \"./quote-box.scss\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getNewQuote } from \"../store/reducer\";\n\nconst QuoteBox = () => {\n    const {quote, author, themeID} = useSelector(state => state);\n\n    const dispatch = useDispatch();\n    const newQuote = (event) => {\n        event.preventDefault();\n        dispatch(getNewQuote);\n    };\n\n\n    if (quote == \"\") {\n        dispatch(getNewQuote);\n        return (\n            <div id=\"quote-box\" className=\"col-6 offset-3 rounded-3 bg-light p-4\">\n                <p>...Retrieving a fresh quote.</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className={\"row align-items-center\"}>\n            <div id=\"quote-box\" className=\"col-6 offset-3 rounded-3 bg-light p-4\">\n                <p id=\"text\" className={\"text-center\"}>\n                    <span className={\"fs-3 fw-bold\"}>{'\"'}</span>\n                    {`${quote}`}\n                    <span className={\"fs-3 fw-bold\"}>{'\"'}</span>\n                </p>\n                <p id=\"author\" className={\"text-end pe-2\"}>\n                    ~ {author}\n                </p>\n                \n                \n                {/* <div className={\"container overflow-hidden\"}> */}\n                <div className={\"d-flex justify-content-between align-items-center\"}>\n                    <a id=\"tweet-quote\" target=\"_blank\" className={`btn btn-sm btn-outline-mytheme${themeID} text-decoration-none`}\n                       href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\"${quote}\" ~${author}`}>\n                        <i className={\"bi bi-twitter\"} role={\"img\"} aria-label={\"twitter\"}></i>\n                        <span> tweet me!</span>\n                    </a> \n                        {/* should be a container for links i.e. #quote-links contains .quote-link */}\n                    <button id=\"new-quote\" onClick={newQuote} className={`btn btn-sm btn-outline-mytheme${themeID}`}>new quote</button>\n                </div>\n                {/* </div> */}\n            </div>\n        </div>\n    );\n}\n\nexport default QuoteBox;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport QuoteBox from './quote-box';\nimport './App.scss';\n\nconst App = () => {\n  const themeID = useSelector(state => state.themeID);\n  \n  return (\n    <div id={\"react-app\"} className={`container-fluid min-vh-100 d-flex flex-column justify-content-center bg-mytheme${themeID}`}>\n      <QuoteBox />\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\n// import { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducer'\n\n// const composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware))\nconst composedEnhancer = applyMiddleware(thunkMiddleware);\n\n// The store now has the ability to accept thunk functions in `dispatch`\nconst store = createStore(rootReducer, composedEnhancer)\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { X } from 'bootstrap';\nimport App from './js/components/App';\nimport store from './js/store/store';\nimport './index.scss';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('react-container')\n);\n\n"],"sourceRoot":""}