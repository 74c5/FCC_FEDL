{"version":3,"sources":["js/components/Display.js","js/store/ui.js","js/store/data.js","js/store/store.js","js/logic/calculator.js","js/logic/controller.js","js/components/Pad.js","js/components/Calculator.js","js/components/Footer.js","js/components/App.js","index.js"],"names":["Display","id","text","useSelector","state","ui","className","uiSlice","createSlice","name","initialState","display","formula","reducers","reducer","action","payload","prepare","actions","symbols","clearSymbols","addSymbol","push","symbol","setSymbols","deleteSymbol","slice","replaceSymbol","concat","store","configureStore","uiReducer","data","dataReducer","dispatch","SYMBOLS","clear","zero","one","two","three","four","five","six","seven","eight","nine","decimal","add","subtract","multiply","divide","equals","delete","sqrt","open","close","SYMBOLTYPES","TYPEMAP","Map","set","OPORDER","OPEXEC","inputs","length","Math","evaluateTree","tree","type","children","value","Number","join","map","child","errors","reduce","acc","val","get","calculate","tokens","root","current","temp","parent","index","indexOf","parseInput","DISPLAYMAP","uiText","btnText","backspace","printSymbols","sym","submitSymbol","initial","getState","previous","has","num","result","console","error","toString","split","char","undefined","filter","final","lastType","token","unshift","initialise","Pad","onClick","event","preventDefault","Calculator","Footer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b123156.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './Display.scss';\n\n\nconst Display = ({id}) => {\n    const text = useSelector(state => state.ui[id]);\n\n    return (\n        <div id={id} className={`display`}>{text}</div>\n    );\n};\n\nexport default Display;","import { createSlice } from '@reduxjs/toolkit';\n\n// default state\nconst initialState = {\n    display  : \"\",   // current token\n    formula  : \"\",   // formula to date\n};\n\nconst uiSlice = createSlice({\n    name: 'ui',\n    initialState,\n    reducers: {\n        display: {\n            reducer: (state, action) => { state.display = action.payload; },\n            prepare: (text) => ({payload: text}),\n        },\n        formula: {\n            reducer: (state, action) => { state.formula = action.payload; },\n            prepare: (text) => ({payload: text}),\n        },\n    }\n});\n\nexport const actions = uiSlice.actions;\nexport default uiSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\n\n// default state\nconst initialState = {\n    symbols: [], // array of symbols for calculator\n};\n\n\nconst uiSlice = createSlice({\n    name: 'data',\n    initialState,\n    reducers: {\n        clearSymbols : {\n            reducer: (state, action) => { state.symbols = []; },\n        },\n        addSymbol : {\n            reducer: (state, action) => { state.symbols.push(action.payload); },\n            prepare: (symbol) => ({ payload: symbol }),\n        },\n        setSymbols : {\n            reducer : (state, action) => { state.symbols = action.payload; },\n            prepare : (symbols) => ({ payload: symbols }),\n        },\n        deleteSymbol: {\n            reducer: (state, action) => { state.symbols = state.symbols.slice(0, -1) }\n        },\n        replaceSymbol: {\n            reducer: (state, action) => { state.symbols = state.symbols.slice(0, -1).concat([action.payload]); },\n            prepare: (symbol) => ({ payload: symbol }),\n        }\n    }\n});\n\nexport const actions = uiSlice.actions;\nexport default uiSlice.reducer;\n\n","import { configureStore } from '@reduxjs/toolkit'\nimport uiReducer from './ui';\nimport dataReducer from './data';\n\n// Devtools, thunk middelware and reducer composer are built into configureStore\nconst store = configureStore(\n    {   reducer : { ui   : uiReducer,\n                    data : dataReducer,\n        }\n    }\n);\n\nexport default store\nexport const dispatch = store.dispatch;","\n// Constants\nexport const SYMBOLS = {\n    clear     : '#',\n    zero      : '0',\n    one       : '1',\n    two       : '2',\n    three     : '3',\n    four      : '4',\n    five      : '5',\n    six       : '6',\n    seven     : '7',\n    eight     : '8',\n    nine      : '9',\n    decimal   : '.',\n    add       : '+',\n    subtract  : '-',\n    multiply  : '*',\n    divide    : '/',\n    equals    : '=',\n    delete    : '<',\n    sqrt      : '¬',\n    open      : '(',\n    close     : ')',\n}\n\nexport const SYMBOLTYPES = {\n    number  : 'number',\n    operator: 'operator',\n    function: 'function',\n    bracket : 'bracket',\n    decimal : 'decimal',\n    command : 'command',\n}\n\nexport const TYPEMAP = new Map();\nTYPEMAP.set( SYMBOLS.zero    , SYMBOLTYPES.number );\nTYPEMAP.set( SYMBOLS.one     , SYMBOLTYPES.number );\nTYPEMAP.set( SYMBOLS.two     , SYMBOLTYPES.number );\nTYPEMAP.set( SYMBOLS.three   , SYMBOLTYPES.number );\nTYPEMAP.set( SYMBOLS.four    , SYMBOLTYPES.number );\nTYPEMAP.set( SYMBOLS.five    , SYMBOLTYPES.number );\nTYPEMAP.set( SYMBOLS.six     , SYMBOLTYPES.number );\nTYPEMAP.set( SYMBOLS.seven   , SYMBOLTYPES.number );\nTYPEMAP.set( SYMBOLS.eight   , SYMBOLTYPES.number );\nTYPEMAP.set( SYMBOLS.nine    , SYMBOLTYPES.number );\nTYPEMAP.set( SYMBOLS.decimal , SYMBOLTYPES.decimal );\nTYPEMAP.set( SYMBOLS.add     , SYMBOLTYPES.operator );\nTYPEMAP.set( SYMBOLS.subtract, SYMBOLTYPES.operator );\nTYPEMAP.set( SYMBOLS.multiply, SYMBOLTYPES.operator );\nTYPEMAP.set( SYMBOLS.divide  , SYMBOLTYPES.operator );\nTYPEMAP.set( SYMBOLS.sqrt    , SYMBOLTYPES.function );\nTYPEMAP.set( SYMBOLS.open    , SYMBOLTYPES.bracket );\nTYPEMAP.set( SYMBOLS.close   , SYMBOLTYPES.bracket );\nTYPEMAP.set( SYMBOLS.equals  , SYMBOLTYPES.command );\nTYPEMAP.set( SYMBOLS.clear   , SYMBOLTYPES.command );\nTYPEMAP.set( SYMBOLS.delete  , SYMBOLTYPES.command );\n\n\nconst OPORDER = new Map(); //use BO(DM)(AS)\nOPORDER.set(SYMBOLS.subtract,  4);\nOPORDER.set(SYMBOLS.add,       4);\nOPORDER.set(SYMBOLS.multiply,  1);\nOPORDER.set(SYMBOLS.divide,    1);\n\n// operation execution/evaluation functions\nconst OPEXEC = new Map();\nOPEXEC.set(SYMBOLS.subtract,    (inputs) => {\n                                    if (inputs.length === 1) {\n                                        return -inputs[0];\n                                    } else if (inputs.length === 2) {\n                                        return inputs[0] - inputs[1];\n                                    } else {\n                                        return `Too many inputs for subtract node: ${inputs}`;\n                                    };\n});\n\nOPEXEC.set(SYMBOLS.add, (inputs) => {\n                            if (inputs.length === 2) {\n                                return inputs[0] + inputs[1];\n                            } else {\n                                return `Incorrect number of inputs for addition node: ${inputs}`\n                            }\n});\n\nOPEXEC.set(SYMBOLS.multiply,    (inputs) => {\n                                    if (inputs.length === 2) {\n                                        return inputs[0] * inputs[1];\n                                    } else {\n                                        return `Incorrect number of inputs for multiply node: ${inputs}`\n                                    }\n});\n\nOPEXEC.set(SYMBOLS.divide,  (inputs) => {\n                                    if (inputs.length === 2) {\n                                        return inputs[0] / inputs[1];\n                                    } else {\n                                        return `Incorrect number of inputs for divide node: ${inputs}`\n                                    }\n                            });\nOPEXEC.set(SYMBOLS.sqrt,    (inputs) => {\n                                    if (inputs.length !== 1) return \"Sqrt should only have 1 input.\"\n                                    return Math.sqrt(inputs[0]);\n});\n\n\n// Utility functions for other parts of apps\nexport const numberToSymbols = (num) => {\n    return num.toString()\n              .split('')\n              .map(char => {\n                    let result = undefined;\n                    for (const sym in SYMBOLS) {\n                        if (SYMBOLS[sym] === char) {\n                            result = SYMBOLS[sym];\n                            break;\n                        }\n                    }\n                    return result;\n              })\n              .filter(val => val !== undefined);\n};\n\n// Main functions\n\n/**\n * Accepts string of inputs and returns a calculation tree\n * todo: implicit multiply between brackets and another operator/number\n */\nexport const parseInput = (symbols) => {\n    let root = null;\n    let current = null;\n    let temp = null;\n\n    for (const symbol of symbols) {\n        const type = TYPEMAP.get(symbol);\n\n        if (type === SYMBOLTYPES.operator) {\n            temp = {value: symbol, type, parent: null, children: []};\n\n            if (root === null) { // only really for initial \"-\"\n                root = temp;\n\n            } else if (symbol === SYMBOLS.subtract && current.type === SYMBOLTYPES.operator) {\n                // what follows should be a negative number - insert as leaf\n                current.children.push(temp);\n                temp.parent = current;\n            \n            } else {\n                // move up the tree until we find the correct insertion point - current node should be a number\n                // note: operations lower in the tree are calculated first\n\n                while (current.parent !== null && ( current.parent.type === SYMBOLTYPES.function || OPORDER.get(symbol) >= OPORDER.get(current.parent.value) )) {\n                    current = current.parent;\n                }\n\n                // insert the operator node\n                temp.children.push(current);\n                temp.parent = current.parent;\n                if (current.parent == null) { // the current node is root\n                    root = temp;\n                } else {\n                    // insertion of temp at parent\n                    const index = current.parent.children.indexOf(current);\n                    current.parent.children[index] = temp;\n                }\n                current.parent = temp;\n            }\n            current = temp;\n        } // end operator\n\n        if (type === SYMBOLTYPES.function) {\n\n            temp = { value: symbol, type, parent: null, children: []};\n            // assume parent is an operator\n            if (root === null) {\n                root = temp;\n\n            } else if (current.type === SYMBOLTYPES.number) { // insert function with implicit priority multiply\n                temp = {type: SYMBOLTYPES.operator, value: SYMBOLS.multiply, parent: current.parent, children: [current, temp]};\n                temp.children[1].parent = temp;\n                if (current.parent === null) {\n                    root = temp;\n                } else {\n                    const index = current.parent.children.indexOf(current);\n                    current.parent.children[index] = temp;\n                }\n                current.parent = temp;\n                temp = temp.children[1];  // set temp back to the function\n\n            } else {\n                temp.parent = current;\n                current.children.push(temp);\n            }\n            current = temp;\n        } // end function\n        \n        if (type === SYMBOLTYPES.bracket) {\n\n            if ( symbol === SYMBOLS.open ) {\n                temp = { type, value: symbol, parent: null, children:[] }\n                if (root == null) {\n                    root = temp;\n                \n                } else if (current.type === SYMBOLTYPES.number) { // insert bracket with implicit multiply\n                    temp = {type: SYMBOLTYPES.operator, value: SYMBOLS.multiply, parent: current.parent, children: [current, temp]};\n                    temp.children[1].parent = temp;\n                    if (current.parent === null) {\n                        root = temp;\n                    } else {\n                        const index = current.parent.children.indexOf(current);\n                        current.parent.children[index] = temp;\n                    }\n                    current.parent = temp;\n                    temp = temp.children[1];  // set temp back to the function\n\n                } else {\n                    current.children.push(temp);\n                    temp.parent = current;\n                }\n                current = temp;\n\n            } else { // closing bracket\n                if (current.value === SYMBOLS.open) {\n                    current.value = symbol; // closed\n\n                } else {\n                    while ( current.parent !== null ) {\n                        current = current.parent;\n                        if (current.value === SYMBOLS.open) {\n                            current.value = symbol; // closed\n                            break;\n                        }\n                    }\n                }\n            }\n        } // end bracket\n\n        if (type === SYMBOLTYPES.number) {\n            if (root === null) { // first leaf\n                temp = {value: [symbol], type: type, parent: null, children: []};\n                root = temp;\n                current = temp;\n\n            } else if (current.type === SYMBOLTYPES.number) {  // add digit to number value\n                current.value.push(symbol);\n\n            } else {\n                \n                if (current.value === SYMBOLS.close) { // insert number with implicit priority multiply with brackets\n                    temp = {type: SYMBOLTYPES.operator, value: SYMBOLS.multiply, parent: current.parent, children: [current]}\n                    \n                    if (current.parent === null) {\n                        root = temp;\n                    } else {\n                        const index = current.parent.children.indexOf(current);\n                        current.parent.children[index] = temp;\n                    }\n                    current.parent = temp;\n                    current = temp;\n                }\n\n                // insert new number \n                temp = {type: SYMBOLTYPES.number, value: [symbol], parent: current, children: []};\n                current.children.push(temp);\n                current = temp;\n            }\n        } // end number\n\n        if (type === SYMBOLTYPES.decimal) {\n            if (root === null) {\n                current = {type: SYMBOLTYPES.number, value: [SYMBOLS.zero, symbol], parent: null, children: []};\n                root = current;\n\n            } else if (current.type === SYMBOLTYPES.number) {\n                current.value.push(symbol);\n\n            } else {\n                temp = {type: SYMBOLTYPES.number, value: [SYMBOLS.zero, symbol], parent: null, children: []};\n                \n                if (current.value === SYMBOLS.close) { // insert number with implicit priority multiply with brackets\n                    temp = {type: SYMBOLTYPES.operator, value: SYMBOLS.multiply, parent: current.parent, children: [current, temp]}\n                    temp.children[1].parent = temp;\n                    if (current.parent === null) {\n                        root = temp;\n                    } else {\n                        const index = current.parent.children.indexOf(current);\n                        current.parent.children[index] = temp;\n                    }\n                    current.parent = temp;\n\n                } else { // operator, function, etc\n                    temp = {type: SYMBOLTYPES.number, value: [symbol], parent: current, children: []};\n                    current.children.push(temp);\n                }\n                current = temp;\n            }\n        }\n    }\n\n    return root;\n}\n\n/** recursive routine to calculate value of inputs */\nexport const evaluateTree = (tree) => {\n    if (tree.type === SYMBOLTYPES.number) {\n        // this should be an end leaf node\n        if (tree.children.length !== 0) {\n            return `Number node (value: ${tree.value}) should be a leaf, but has children)`;\n        }\n        return Number(tree.value.join(''));\n    }\n\n    if (tree.type === SYMBOLTYPES.operator || tree.type === SYMBOLTYPES.function) {\n        const inputs = tree.children.map(child => evaluateTree(child));\n        const errors = inputs.reduce( (acc,val) => {\n            if (typeof val === 'string') {\n                if (acc.length > 0) acc += ' ' + val;\n                else acc += val;\n            }\n            return acc;\n        }, '');\n        \n        if (errors !== '') return errors;\n\n        return OPEXEC.get(tree.value)(inputs);\n    }\n\n    if ( tree.type === SYMBOLTYPES.bracket ) {\n        if (tree.children.length !== 1) {\n            return `Bracket Node can only have one child: ${tree.children}`;\n        }\n\n        const input = evaluateTree(tree.children[0]);\n\n        return input;\n    }\n\n    return `Unknown node found: ${tree.type}, ${tree.value}`;\n}\n\n\n/**\n * inputs: tokens - array of calculator tokens\n * returns: {\n *      status : 'success' | 'error'\n *      value  : number | error reason\n * }\n */\nexport const calculate = (tokens) => {\n    const tree = parseInput(tokens);\n    const answer = evaluateTree(tree);\n\n    return answer;\n}","import store, {dispatch} from '../store/store';\nimport { actions as ui } from '../store/ui';\nimport { actions as data } from '../store/data'\nimport { SYMBOLS, SYMBOLTYPES, TYPEMAP, numberToSymbols, calculate} from './calculator';\n\n// Application Constants\nexport const DISPLAYMAP = new Map();\nDISPLAYMAP.set( SYMBOLS.clear     , {uiText: '',  btnText: 'AC'} );\nDISPLAYMAP.set( SYMBOLS.zero      , {uiText: '0', btnText: '0'} );\nDISPLAYMAP.set( SYMBOLS.one       , {uiText: '1', btnText: '1'} );\nDISPLAYMAP.set( SYMBOLS.two       , {uiText: '2', btnText: '2'} );\nDISPLAYMAP.set( SYMBOLS.three     , {uiText: '3', btnText: '3'} );\nDISPLAYMAP.set( SYMBOLS.four      , {uiText: '4', btnText: '4'} );\nDISPLAYMAP.set( SYMBOLS.five      , {uiText: '5', btnText: '5'} );\nDISPLAYMAP.set( SYMBOLS.six       , {uiText: '6', btnText: '6'} );\nDISPLAYMAP.set( SYMBOLS.seven     , {uiText: '7', btnText: '7'} );\nDISPLAYMAP.set( SYMBOLS.eight     , {uiText: '8', btnText: '8'} );\nDISPLAYMAP.set( SYMBOLS.nine      , {uiText: '9', btnText: '9'} );\nDISPLAYMAP.set( SYMBOLS.decimal   , {uiText: '.', btnText: '.'} );\nDISPLAYMAP.set( SYMBOLS.add       , {uiText: '+', btnText: '+'} );\nDISPLAYMAP.set( SYMBOLS.subtract  , {uiText: '-', btnText: '-'} );\nDISPLAYMAP.set( SYMBOLS.multiply  , {uiText: '\\u00D7', btnText: '*'} );\nDISPLAYMAP.set( SYMBOLS.divide    , {uiText: '\\u00F7', btnText: '/'} );\nDISPLAYMAP.set( SYMBOLS.equals    , {uiText: '=', btnText: '='} );\nDISPLAYMAP.set( SYMBOLS.backspace , {uiText: '<', btnText: '\\u2190'} );\nDISPLAYMAP.set( SYMBOLS.sqrt      , {uiText: '\\u221A', btnText: '\\u221A'} );\nDISPLAYMAP.set( SYMBOLS.open      , {uiText: '(', btnText: '('} );\nDISPLAYMAP.set( SYMBOLS.close     , {uiText: ')', btnText: ')'} );\n\n// utility functions\nexport const getUiText  = (symbol) => DISPLAYMAP.get(symbol).uiText || '';\nexport const getBtnText = (symbol) => DISPLAYMAP.get(symbol).btnText || '';\n\nconst printSymbols = (symbols) => {\n    return symbols.map(sym => DISPLAYMAP.get(sym).uiText).join('');\n}\n\n\n// App Functions\nexport const submitSymbol = (symbol) => {\n    const initial  = store.getState().data.symbols;\n    const current  = initial[initial.length-1];\n    const previous = initial[initial.length-2];\n\n    if (TYPEMAP.has(symbol) === false) {\n        dispatch( ui.display( `Unknown symbol: ${symbol}`) );\n        return;\n    }\n\n    const type = TYPEMAP.get(symbol);\n\n    if (type === SYMBOLTYPES.command) {\n        switch (symbol) {\n            case SYMBOLS.clear: \n                dispatch( data.clearSymbols() );\n                break;\n\n            case SYMBOLS.delete:\n                dispatch( data.deleteSymbol() );\n                break;\n    \n            case SYMBOLS.equals:\n                const result = calculate(initial);\n                if (typeof result === 'string') {\n                    dispatch( ui.display('invalid inputs'));\n                    console.error(result);\n                    return;\n                }\n                dispatch( ui.formula( printSymbols(initial) + DISPLAYMAP.get(symbol).uiText ) );\n                dispatch( ui.display( result ) );\n                dispatch( data.setSymbols( numberToSymbols(result) ) );\n                return;\n                    \n            default:\n                dispatch( ui.display(`Unknown command symbol: ${symbol}`) );\n                return;\n        }\n    } // end commands\n\n    if (type === SYMBOLTYPES.number) {\n        if (initial.length === 0) {\n            dispatch( data.addSymbol( symbol ));\n        \n        } else if (current === SYMBOLS.zero && (initial.length === 1 || TYPEMAP.get(previous) === SYMBOLTYPES.number)) { \n            // only allow 1 lead zero\n            dispatch( data.replaceSymbol(symbol) );\n        } else {\n            dispatch( data.addSymbol(symbol) );\n        }       \n    } // end numbers\n\n    if (symbol === SYMBOLS.decimal) {\n        if (initial.length === 0 || (TYPEMAP.get(current) !== SYMBOLTYPES.number && current !== SYMBOLS.decimal)) {\n            dispatch( data.addSymbol( SYMBOLS.zero ));\n            dispatch( data.addSymbol( symbol ));\n        } else {\n            // search backwards, through the latest range of number symbols, for another decimal point.\n            let index = initial.length - 1;\n    \n            while (index > 0 && TYPEMAP.get(initial[index]) === SYMBOLTYPES.number) {\n                index--;\n            }\n    \n            if (initial[index] !== SYMBOLS.decimal) {\n                dispatch( data.addSymbol(symbol));\n            }\n        }\n    } // end decimal\n\n    if (type === SYMBOLTYPES.operator) {\n        if (symbol === SYMBOLS.subtract) { //Special handling for negative numbers\n            if (    initial.length === 0 || TYPEMAP.get(current) !== SYMBOLTYPES.operator ||\n                    ( initial.length > 0 && TYPEMAP.get(current) === SYMBOLTYPES.operator) ||\n                    ( initial.length > 1 && TYPEMAP.get(previous) === SYMBOLTYPES.operator ) \n               ) {\n                dispatch( data.addSymbol(symbol) );\n            }\n\n        } else { // other operators\n            if (initial.length > 0) { // single operands not allowed\n\n                if (initial.length > 1 && current === SYMBOLS.subtract && TYPEMAP.get(previous) === SYMBOLTYPES.operator) {\n                    dispatch( data.deleteSymbol() ); // delete the subtract\n                    dispatch( data.replaceSymbol(symbol) ); // replace with current symbol;\n                } else if (TYPEMAP.get(current) === SYMBOLTYPES.operator) {\n                    dispatch( data.replaceSymbol(symbol) ); // replace with current symbol;\n                } else {\n                    dispatch( data.addSymbol(symbol) );\n                }\n\n            }\n        }\n    } // end operators\n\n    if (type === SYMBOLTYPES.function) {\n        dispatch( data.addSymbol(symbol) );\n    }\n\n    if (type === SYMBOLTYPES.bracket) {\n        if (symbol === SYMBOLS.close) {\n            // only add closing bracket if there are un-closed open brackets\n            const {open, close} = initial.reduce( (acc, sym) => {\n                if (sym === SYMBOLS.open) acc.open++;\n                else if (sym === SYMBOLS.close) acc.close++;\n                return acc;\n            }, {open: 0, close: 0});\n        \n            if (open > close) {\n                dispatch( data.addSymbol(symbol) );\n            }\n\n        } else { // open\n            dispatch ( data.addSymbol(symbol) );\n        }\n    } // end brackets\n            \n\n    // Update the UI with changes from above\n    const final = store.getState().data.symbols;\n    if (final.length === 0) {\n        dispatch( ui.display('0'));\n        dispatch( ui.formula(''));\n        return;\n    }\n\n    dispatch( ui.formula(printSymbols(final)) );\n\n    let index = final.length-1;\n    const lastType = TYPEMAP.get(final[index]);\n    \n    if (lastType === SYMBOLTYPES.bracket || lastType === SYMBOLTYPES.function || lastType === SYMBOLTYPES.operator ) { \n        dispatch( ui.display( DISPLAYMAP.get(final[index]).uiText ) );\n        return;\n    }\n\n    // else number... collect all digits including '-' if applicable\n    const token = [];\n    while (index >= 0) {\n        const sym = final[index];\n        const type = TYPEMAP.get(sym);\n        if ( type === SYMBOLTYPES.number || type === SYMBOLTYPES.decimal || \n             (sym === SYMBOLS.subtract && ( index === 0 || (index >= 1 && TYPEMAP.get(final[index-1]) === SYMBOLTYPES.operator) )) ) {\n            token.unshift(sym);\n        } else {\n            break;\n        }\n        index--;\n    }\n    dispatch( ui.display( printSymbols(token) ) );\n}\n\n// keycode event handler\n// const keyDown = (event) => {\n//     const keylist = store.getState().data.keylist;\n//     const id = MAPKEY[event.code];\n//     if (keylist[id] === 'enabled') {\n//         playClip(id);\n//     }\n// }\n\n// Startup sequence for the programme\nexport const initialise = () => {\n    dispatch(data.clearSymbols());\n    dispatch(ui.display('0'));\n    dispatch(ui.formula(''));\n    // document.addEventListener('keydown', keyDown);\n};\n\nexport default initialise;","import { DISPLAYMAP, submitSymbol } from '../logic/controller';\n\nimport './Pad.scss';\n\n\nconst Pad = ({id, symbol}) => {\n   \n    const onClick = (event) => {\n        event.preventDefault();\n        submitSymbol(symbol);\n    }\n\n    return (\n        <button id={id} className={`pad`} onClick={onClick}>\n            {DISPLAYMAP.get(symbol).btnText}\n        </button>\n    );\n};\n\nexport default Pad;","import Display from './Display';\nimport Pad from './Pad';\nimport { SYMBOLS } from '../logic/calculator';\nimport './Calculator.scss';\n\nconst Calculator = () => {\n    return (\n        <div id=\"calculator\">\n            <Display id=\"formula\"/>\n            <Display id=\"display\" />\n            <Pad id=\"zero\"      symbol={SYMBOLS.zero} />\n            <Pad id=\"one\"       symbol={SYMBOLS.one} />\n            <Pad id=\"two\"       symbol={SYMBOLS.two} />\n            <Pad id=\"three\"     symbol={SYMBOLS.three} />\n            <Pad id=\"four\"      symbol={SYMBOLS.four} />\n            <Pad id=\"five\"      symbol={SYMBOLS.five} />\n            <Pad id=\"six\"       symbol={SYMBOLS.six} />\n            <Pad id=\"seven\"     symbol={SYMBOLS.seven} />\n            <Pad id=\"eight\"     symbol={SYMBOLS.eight} />\n            <Pad id=\"nine\"      symbol={SYMBOLS.nine} />\n            <Pad id=\"clear\"     symbol={SYMBOLS.clear} />\n            <Pad id=\"add\"       symbol={SYMBOLS.add}  />\n            <Pad id=\"subtract\"  symbol={SYMBOLS.subtract}  />\n            <Pad id=\"multiply\"  symbol={SYMBOLS.multiply}  />\n            <Pad id=\"divide\"    symbol={SYMBOLS.divide}  />\n            <Pad id=\"decimal\"   symbol={SYMBOLS.decimal}  />\n            <Pad id=\"equals\"    symbol={SYMBOLS.equals}  />\n            <Pad id=\"backspace\" symbol={SYMBOLS.backspace}  />\n            <Pad id=\"sqrt\"      symbol={SYMBOLS.sqrt}  />\n            <Pad id=\"open\"      symbol={SYMBOLS.open}  />\n            <Pad id=\"close\"     symbol={SYMBOLS.close}  />\n        </div>\n    );\n};\n\nexport default Calculator;","import './Footer.scss';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <p>\n                created by <em>74c5</em>\n            </p>\n        </footer>\n    );\n};\n\nexport default Footer;","import React from 'react';\nimport Calculator from './Calculator';\nimport Footer from './Footer'\nimport './App.scss';\n\n\nconst App = () => {\n    return (\n        <div id=\"react-app\">\n            <main>\n                <Calculator />\n            </main>\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport App from './js/components/App';\nimport store from './js/store/store';\nimport initialise from './js/logic/controller';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('react-container')\n);\n\ninitialise();"],"sourceRoot":""}