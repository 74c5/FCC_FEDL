{"version":3,"sources":["js/store/reducer.js","js/components/Controls.js","js/components/Inputter.js","js/components/Outputter.js","js/components/useScreenSize.js","js/components/App.js","js/store/store.js","index.js"],"names":["SET_OUTPUT","SET_INPUT","SET_STATUS","SET_MODE","translate","dispatch","getState","input","status","type","undefined","payload","html","marked","breaks","clean","DOMpurify","sanitize","text","defaultStore","output","mode","markdownReducer","store","console","log","Controls","useSelector","state","useDispatch","id","value","onChange","event","preventDefault","target","setMode","onClick","Inputter","htmlFor","name","Outputter","dangerouslySetInnerHTML","__html","useScreenSize","useState","width","window","innerWidth","height","innnerHeight","screen","setScreen","handleWindowSizeChange","innerHeight","useEffect","addEventListener","removeEventListener","App","viewClass","className","composedEnhancer","applyMiddleware","thunkMiddleware","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7e13060.chunk.js","sourcesContent":["// At the minute we only have simple state - it is all lumped in together\nimport marked from 'marked';\nimport DOMpurify from 'dompurify';\n\n// action enums\nconst SET_OUTPUT = 'set-output';\nconst SET_INPUT = 'set-input';\nconst SET_STATUS = 'set-status';\nconst SET_MODE = 'set-mode';\n\n// action functions\nexport const setInput = (text) => (dispatch, getState) => {\n    const { mode } = getState();\n    dispatch({type: SET_INPUT, payload: text});\n    \n    if (mode === 'interactive') dispatch(translate);\n}; \n\nexport const translate = (dispatch, getState) => {\n    const {input, status} = getState();\n    \n    if (status === 'busy') return {type: undefined}; //ignore futher calls for translation\n\n    dispatch({type: SET_STATUS, payload: 'busy'});\n\n    const html = marked(input, {breaks: true});\n    const clean = DOMpurify.sanitize(html);\n\n    dispatch({type: SET_OUTPUT, payload: clean}); //todo: use converted input\n}\n\nexport const setMode = (mode) => (dispatch, getState) => dispatch({type: SET_MODE, payload: mode});\n\n\n// defaults\nconst text = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can be here, | and it can be here.... | or there\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![FavIcon](./favicon.ico)\n`;\n\nconst defaultStore = {\n    input:  text,\n    output: DOMpurify.sanitize(marked(text, {breaks: true})),\n    mode:   'interactive',  // interactive || manual\n    status: 'idle',  // idle || busy\n}\n\n\n// reducers\nconst markdownReducer = (store=defaultStore, {type, payload}) => {\n    switch (type) {\n        case SET_INPUT:\n            return {...store, input: payload};\n        case SET_OUTPUT:\n            return ({...store, output: payload, status: 'idle'});\n        case SET_STATUS:\n            return ({...store, status: payload});\n        case SET_MODE:\n            console.log(`new mode is ${payload}?`)\n            return ({...store, mode: payload});\n        default:\n            return store;\n    }\n}\n\nexport default markdownReducer;\nexport {markdownReducer as rootReducer};","import { useDispatch, useSelector } from 'react-redux';\nimport { setMode, translate } from '../store/reducer';\n\nimport './Controls.scss';\n\nconst Controls = () => {\n    const mode = useSelector(state => state.mode);\n\n    const dispatch = useDispatch();\n\n    const onModeChange = (event) => {\n        event.preventDefault();\n        console.log(`triggering new mode of ${event.target.value} from ${mode}`);\n        dispatch(setMode(event.target.value))\n    };\n\n    const onClick = (event) => {\n        event.preventDefault();\n        dispatch(translate);\n    }\n\n    return (\n        <div id=\"controls\">\n            <select value={mode} onChange={onModeChange}>\n                <option value=\"interactive\">Interactive Mode</option>\n                <option value=\"manual\">Manual Mode</option>\n            </select>\n            <button onClick={onClick}>update</button>\n        </div>\n    );\n};\n\nexport default Controls;","//import React, {useState} from \"react\";\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setInput } from '../store/reducer'\nimport './Inputter.scss';\n\n\nconst Inputter = () => {\n    //const [text, setText] = useState(\"some default text to get us started\");\n    \n    const input = useSelector(state => state.input);\n    \n    const dispatch = useDispatch();\n\n    const onChange = (event) => {\n        event.preventDefault();\n        dispatch(setInput(event.target.value));\n    }\n\n    return (\n        <div id=\"inputter\">\n            <label htmlFor=\"markdown-input\">Markdown Text</label>\n            <textarea id=\"editor\" name=\"markdown-input\" value={input} onChange={onChange}>\n            </textarea>\n        </div>\n    );\n};\n\nexport default Inputter;","import './Outputter.scss';\nimport { useSelector } from 'react-redux'\n\n\n\nconst Outputter = () => {\n    const output = useSelector(state => state.output);\n\n    return (\n        <div id=\"outputter\">\n            <h3>Markdown Preview</h3>\n            <div id=\"preview\" dangerouslySetInnerHTML={{__html: output}} />\n        </div>\n    );\n};\n\nexport default Outputter;","/** \n * Custom React Hook which returns screen size for dynamic responsice layout \n * link: https://stackoverflow.com/questions/39435395/reactjs-how-to-determine-if-the-application-is-being-viewed-on-mobile-or-deskto\n * */\nimport {useEffect, useState} from \"react\";\n\nconst useScreenSize = () => {\n    const [screen, setScreen] = useState({width: window.innerWidth, height: window.innnerHeight});\n    \n    const handleWindowSizeChange = () => {\n        setScreen({width: window.innerWidth, height: window.innerHeight});\n    }\n\n    useEffect(() => {\n        window.addEventListener('resize', handleWindowSizeChange);\n        return () => {\n            window.removeEventListener('resize', handleWindowSizeChange);\n        }\n    }, []);\n\n    return screen;\n}\n\nexport default useScreenSize;","import React from 'react';\nimport Controls from './Controls';\nimport Inputter from './Inputter';\nimport Outputter from './Outputter';\nimport useScreenSize from './useScreenSize';\nimport './App.scss';\n\nconst App = () => {\n  //const dispatch = useDispatch();\n  //dispatch(setManual);\n  //dispatch(setInteractive);\n  \n  const screen = useScreenSize();\n\n  const viewClass = (screen.width < 1100) ? 'mobileView' : 'fullView';\n\n  return (\n    <div id=\"react-app\" className={viewClass}>\n      <Controls />\n      <Inputter /> \n      <Outputter />\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\n// import { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducer'\n\n// const composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware))\nconst composedEnhancer = applyMiddleware(thunkMiddleware);\n\n// The store now has the ability to accept thunk functions in `dispatch`\nconst store = createStore(rootReducer, composedEnhancer)\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport App from './js/components/App';\nimport store from './js/store/store';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('react-container')\n);"],"sourceRoot":""}